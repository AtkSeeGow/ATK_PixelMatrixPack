// LightsMatrixController.h

#ifndef _LIGHTSMATRIXCONTROLLER_h
#define _LIGHTSMATRIXCONTROLLER_h

#include <LedControl.h>

class LightsMatrixController {
public:
  LightsMatrixController(int dataPin, int clockPin, int chipSelectPin, int deviceCount);
  void Execution();
private:
  LedControl ledControl;

  unsigned long lastExecutionTime;
  
  byte botamons[8][8] = {
    { 0x80, 0xf8, 0xec, 0xb8, 0xb8, 0xec, 0xf8, 0x80 },
    { 0x80, 0xe0, 0xd8, 0xf0, 0xf0, 0xb8, 0xe0, 0x80 },
    { 0x7c, 0xfb, 0x9e, 0x9e, 0xfb, 0x7c, 0x00, 0x00 },
    { 0x1c, 0x3b, 0xf6, 0x9e, 0x9e, 0xf6, 0x3b, 0x1c },
    { 0x82, 0xc3, 0xc7, 0xcf, 0xfb, 0xfe, 0xfe, 0xc3 },
    { 0xc0, 0xf0, 0xd0, 0xf0, 0x78, 0x00, 0x00, 0x00 },
    { 0x58, 0xdc, 0xd6, 0xf4, 0xfe, 0x78, 0x00, 0x00 },
    { 0xc0, 0xa0, 0xb8, 0xf0, 0xf0, 0xb8, 0xa0, 0xc0 }
  };
  byte attacks[44][8] = {
    { 0x3c, 0x42, 0x81, 0x81, 0x85, 0xad, 0x42, 0x3c },
    { 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x7c },
    { 0x60, 0xa0, 0xd0, 0x28, 0x14, 0x0b, 0x05, 0x06 },
    { 0x00, 0x00, 0x81, 0xc3, 0xff, 0xbd, 0x42, 0x3c },
    { 0xfc, 0x48, 0x84, 0x84, 0xfc, 0xf4, 0x68, 0x30 },
    { 0x3c, 0x72, 0xfd, 0xff, 0xff, 0xff, 0x7e, 0x3c },
    { 0x00, 0x3c, 0x42, 0x3c, 0x00, 0x7e, 0x81, 0x7e },
    { 0xa5, 0x18, 0xbd, 0xbd, 0xff, 0xdb, 0x66, 0x3c },
    { 0x04, 0xca, 0xe0, 0xd0, 0xf8, 0xa0, 0xc2, 0x05 },
    { 0x0e, 0x1c, 0x38, 0x70, 0xfc, 0x38, 0x70, 0xe0 },
    { 0x6c, 0x54, 0x44, 0x28, 0x28, 0x28, 0x10, 0x10 },
    { 0x10, 0xba, 0xfe, 0xee, 0xc6, 0xc6, 0x6c, 0x38 },
    { 0x78, 0x48, 0x7c, 0x7e, 0x4e, 0x4e, 0x5e, 0x3c },
    { 0x0c, 0x02, 0x79, 0xfd, 0xfe, 0xf4, 0xf4, 0x78 },
    { 0x01, 0x3f, 0x41, 0xbb, 0xfa, 0xb2, 0x44, 0x38 },
    { 0x4e, 0x1f, 0x5f, 0x4f, 0x67, 0x7f, 0x3e, 0x1c },
    { 0x00, 0x1e, 0x3f, 0x7f, 0xfe, 0x7f, 0x33, 0x1e },
    { 0x3f, 0x27, 0x27, 0x27, 0x27, 0x2f, 0x5e, 0xfc },
    { 0x00, 0x11, 0xaa, 0x45, 0x11, 0xbb, 0xee, 0x44 },
    { 0x18, 0x3c, 0x00, 0x3c, 0x7e, 0x00, 0x7e, 0xff },
    { 0x7e, 0x42, 0x7e, 0x7e, 0x7e, 0x7a, 0x34, 0x18 },
    { 0xaa, 0x44, 0xee, 0x54, 0x38, 0x6c, 0x38, 0x10 },
    { 0x00, 0x7c, 0xee, 0xc6, 0x92, 0xaa, 0xc6, 0x82 },
    { 0x04, 0x4a, 0xa4, 0x40, 0x0c, 0x12, 0x12, 0x0c },
    { 0x81, 0xc3, 0x66, 0x3c, 0x99, 0xc3, 0x66, 0x3c },
    { 0x42, 0x5a, 0x3c, 0x7a, 0x7a, 0x7e, 0x34, 0x18 },
    { 0x3e, 0x22, 0x24, 0x24, 0x14, 0x14, 0x0c, 0x04 },
    { 0x92, 0xd6, 0xba, 0xba, 0xaa, 0xba, 0x44, 0x38 },
    { 0xf8, 0x9e, 0xb7, 0xd5, 0x95, 0x25, 0x79, 0x0f },
    { 0x3c, 0x66, 0xdb, 0xbd, 0xb5, 0xdb, 0x66, 0x3c },
    { 0x00, 0x1e, 0x7b, 0x3b, 0x6f, 0x3b, 0x7b, 0x1e },
    { 0x00, 0x6c, 0x92, 0xba, 0x6c, 0xba, 0x92, 0x6c },
    { 0x7f, 0x63, 0x63, 0x07, 0x06, 0xfe, 0xc0, 0xc0 },
    { 0x80, 0xdc, 0xa2, 0xa1, 0xa5, 0x99, 0x42, 0x3c },
    { 0x99, 0x3c, 0xb5, 0x99, 0xc3, 0xbd, 0x42, 0x3c },
    { 0x00, 0x91, 0x91, 0xdb, 0xdb, 0x4a, 0x4a, 0x08 },
    { 0x7f, 0x5d, 0x5d, 0x5d, 0x5d, 0x2a, 0x14, 0x08 },
    { 0xff, 0x0f, 0x0b, 0x0b, 0x0b, 0x0b, 0x16, 0x3c },
    { 0x00, 0x80, 0x81, 0xc3, 0xfd, 0xf2, 0x84, 0x78 },
    { 0x00, 0x60, 0xf6, 0xf6, 0x60, 0x0c, 0x6c, 0x60 },
    { 0x41, 0x6b, 0x7f, 0x5d, 0x49, 0x63, 0x36, 0x1c },
    { 0x70, 0x70, 0xfc, 0xff, 0x9f, 0x95, 0x15, 0x05 },
    { 0x52, 0xdb, 0x24, 0x5b, 0xda, 0x24, 0xdb, 0x4a },
    { 0x1f, 0x72, 0xc4, 0x87, 0x82, 0x84, 0xcc, 0x78 }
  };

  byte monsterBuffer[8] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };

  int step = 0;
  int monsterTypeIndex = 0;
  int monsterScreenIndex = 3;
  int attackTypeIndex = 0;
  int attackScreenIndex = 8;

  void drawingMovingScreen();
  void drawingAttackScreen();
  
  void bind();
  byte bindBuffer[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

  void flip(byte* data, int size);
  byte flipBuffer [8] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };

  void padding(byte* data, int size, int count);
  byte paddingBuffer [8] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
};

#endif
